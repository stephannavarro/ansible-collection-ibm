---
- hosts: localhost
  environment:
    IC_API_KEY: "{{pi_api_key}}"
    IC_REGION: "{{region}}"
    IC_ZONE: "{{zone}}"
  
  collections:
    - ibmcloud.ibmcollection
  vars:
    instance_id: "4eeb9e4c-de30-419a-9993-ef9f0b39f0b0"
    ip_adresses: []
  gather_facts: True
  tasks: 
  - name: showing networks
    debug: 
      msg: "{{private_rac_networks}}"
    tags: network
  

  - name: checking if subnet already exists
    ibm_pi_network_info: 
      pi_cloud_instance_id: "{{instance_id}}"
      pi_network_name: "{{item.pi_network_name}}"
    with_items: "{{ private_rac_networks}}"
    failed_when:
      - pi_network_existing_output.rc != 0
      - '"unable to get network" not in pi_network_existing_output.stderr'
    register: pi_network_existing_output
    tags: network


  - name: showing networks
    debug: 
      msg: "{{pi_network_existing_output}}"
    tags: network
  
  - name: showing  already existing networks
    debug: 
      msg: "{{ pi_network_existing_output.results | json_query(query)  }}"
    vars: 
      query: "[? rc ==`0`].{id: resource.id}"
    tags: network

  - name: setting existing non ecisting networks already existing networks
    set_fact: 
      existing_networks: "{{ pi_network_existing_output.results | json_query(query)  }}"
      tobecreated_networks: "{{ pi_network_existing_output.results | json_query(query1)  }}"
    vars: 
      query: "[? rc ==`0`].{id: resource.id}"
      query1: "[? rc !=`0`].{name: item.pi_network_name} "
    tags: network

  - name: showing   existing to create
    debug: 
      msg: "{{ pi_network_existing_output.results | json_query(query)  }}"
    vars: 
      query: "[? rc !=`0`].{name: item.pi_network_name} "
    tags: network
 
  
  - name: loop with test 
    debug: 
      msg: "{{ item.0.name }} {{ item.1.pi_network_name}}"
    with_nested: 
      - "{{tobecreated_networks}}"
      - "{{ private_rac_networks}}" 
    when:  item.0.name  == item.1.pi_network_name
    tags: network
  

  - name: creating network 
    ibm_pi_network:
      pi_cloud_instance_id: "{{instance_id}}"
      pi_network_name: "{{item.1.pi_network_name}}"
      pi_network_jumbo: "{{item.1.jumbo}}"
      pi_network_type: "{{item.1.pi_network_type}}"
      pi_cidr: "{{item.1.pi_cidr}}"
      state: available
    register: pi_networks
    tags: network
    with_nested: 
      - "{{tobecreated_networks}}"
      - "{{ private_rac_networks}}" 
    when:  item.0.name  == item.1.pi_network_name
 
  - name: seting lpar netwok list
    set_fact: 
      lpar_network_list: "{{lpar_network_list | default([]) + [item]}}"     
    with_items: "{{private_rac_networks | json_query('[*].{network_id: pi_network_name}')}}"
    tags: network
 
  - name : debug
    debug: 
      msg: "{{lpar_network_list}}"
    tags: network

  - name: Check for existing Volume
    ibm_pi_volume_info:
      pi_volume_name: "{{item.pi_volume_name}}"
      pi_cloud_instance_id: "{{ instance_id }}"
    failed_when:
      - pi_volume_existing_output.rc != 0
      - '"does not exist" not in pi_volume_existing_output.stderr'
      - '"Resource not found" not in pi_volume_existing_output.stderr'
      - '"rce not found" not in pi_volume_existing_output.stderr'
    register: pi_volume_existing_output
    with_items: "{{ data_disk_list }}"
    tags: disks
 
  - name: showing disks
    debug:
      msg: "{{ pi_volume_existing_output }}"
    tags: disks

  - name: setting existing/non existing disk already existing networks
    set_fact: 
      existing_disks: "{{ pi_volume_existing_output.results | json_query(query)  }}"
      tobecreated_disks: "{{ pi_volume_existing_output.results | json_query(query1)  }}"
    vars: 
      query: "[? rc ==`0`].{id: resource.id, name: resource.name}"
      query1: "[? rc !=`0`].{name: item.pi_volume_name} "
    tags: disks

  
  - name: creating disks
    ibm_pi_volume:
      pi_cloud_instance_id: "{{instance_id}}"
      pi_volume_shareable: "{{item.1.pi_volume_shareable}}"
      pi_volume_name: "{{item.1.pi_volume_name}}"
      pi_volume_size: "{{item.1.pi_volume_size}}"
      pi_volume_type: "{{item.1.pi_volume_type}}"
      state: available
    with_nested: 
      - "{{tobecreated_disks}}"
      - "{{data_disk_list}}" 
    when:  item.0.name  == item.1.pi_volume_name
    register: pi_vols
    tags: disks

  - name: showing disks
    debug:
      msg: "{{ pi_volume_existing_output }}"
    tags: disks

  - name: showing disks
    debug:
      msg: "{{ pi_vols }}"
    tags: disks

  - name: setting disks var with ids
    debug:
      msg: "{{item}}"
    with_items:
      - "{{ existing_disks | json_query(query) }}"
    vars:
      query: "[*].id"
    tags: disks

  - name: setting disks var with ids
    set_fact:
      diskid_list: "{{pi_vols | json_query(query) + existing_disks | json_query(query1) }}"
    vars:
      query: "results[*].resource.volume_id"
      query1: "[*].id"
    tags: disks

  - name: cheking var 
    debug: 
      msg: "{{diskid_list}}"
    tags: disks
  
  - name: Retrieve image list
    ibm_pi_images_info:
      pi_cloud_instance_id: "{{ pi_cloud_instance_id }}"
    register: images_list
    tags: images

  - name: Set VM image name/id dictionary fact
    set_fact:
      image_dict: "{{ images_list.resource.image_info |
                      items2dict(key_name='name',
                      value_name='id') }}"
    tags: images
  - name: displaying image selected
    debug:
      msg: "{{ image_dict[pi_image] }}"
    tags: images

  - name: creating affinity policy
    ibm_pi_placement_group:
      pi_cloud_instance_id: "{{ pi_cloud_instance_id }}"
      pi_placement_group_name: "{{ affinity_policy.name }}"
      pi_placement_group_policy: "{{ affinity_policy.policy }}"
    register: affpolicy
    tags: policy

  - name: showwing affinity poilicy
    set_fact: 
      pi_placement_group_id: "{{ affpolicy.resource.placement_group_id}}"
      #msg: "{{ affpolicy.resource.id }}"
    when: affpolicy.changed == True
    tags: policy

  - name: showwing affinity poilicy
    set_fact: 
      pi_placement_group_id: "{{ affpolicy.resource.id }}"
    when: affpolicy.changed == False
    tags: policy

  - name : setting LPAR Names Vars
    set_fact: 
      lpar_names: "{{lpar_names | default([]) + [item]}}"
    with_sequence: start=1 end={{cluster_vm_name_number}} format={{cluster_vm_name_prefix}}%04x
    tags: 
      - sntest
      - vm

  - name: showing lpar names
    debug: 
      msg: "{{lpar_names}}"
    tags:
      - sntest
      - vm

  - name: Check for existing Virtual Server Instance
    ibm_pi_instance_info:
      pi_instance_name: "{{ item }}"
      pi_cloud_instance_id: "{{ pi_cloud_instance_id }}"
    failed_when:
      - pi_instance_existing_output.rc != 0
      - '"does not exist" not in pi_instance_existing_output.stderr'
    with_items: "{{lpar_names}}"
    register: pi_instance_existing_output
    tags: 
      - sntest
      - vm

  - name: setting existing/non existing Virtual Server Instances
    set_fact:
      existing_lpars: "{{ pi_instance_existing_output.results | json_query(query)  }}"
      tobecreated_lpars: "{{ pi_instance_existing_output.results | json_query(query1)  }}"
    vars:
      query: "[? rc ==`0`].{id: resource.id, name: resource.pi_instance_name}"
      query1: "[? rc !=`0`].{name: item}"
    tags:
      - sntest
      - vm

  - name: Create a POWER Virtual Server Instance
    ibm_pi_instance:
      state: available
      pi_placement_group_id : "{{ pi_placement_group_id }}"
      pi_memory: "{{ memory }}"
      pi_processors: "{{ processors }}"
      pi_instance_name: "{{ item.name }}"
      pi_proc_type: "{{ proc_type }}"
      pi_image_id: "{{ image_dict[pi_image] }}"
      pi_volume_ids:  "{{diskid_list}}" 
      pi_network: "{{lpar_network_list}}"
      pi_key_pair_name: "{{ ssh_public_key }}"
      pi_sys_type: "{{ sys_type }}"
      pi_replication_policy: none
      pi_replication_scheme: suffix
      pi_replicants: "1"
      pi_cloud_instance_id: "{{ pi_cloud_instance_id }}"
      id: "{{ pi_instance.resource.id | default(omit) }}"
      pi_health_status: WARNING
    register: pi_instance_create_output
    with_items: "{{tobecreated_lpars}}" 
    tags:
      - sntest
      - vm


  - name: showing info from pi_instance_existing_output
    set_fact: 
      existing_ips: "{{ existing_ips  | default([]) + [item.ip]}}"
    with_items: "{{pi_instance_existing_output | json_query(query) }}"
    vars:
      query: "results[*].resource.addresses[*].{ip: ip, name: network_name}"
    when: item.name == private_rac_networks[0].pi_network_name 
    tags:
      - sntest
      - vm


  - name: setting new_ips info from pi_instance_create_output
    set_fact: 
      new_ips: "{{new_ips  | default([]) + [item.ip]}}" 
    with_items:  "{{pi_instance_create_output  | json_query(query) }}"
    vars:
      query: "results[*].resource.pi_network[*].{ip: ip_address, name: network_name}"
    when: item.name == private_rac_networks[0].pi_network_name 
    tags:
      - sntest
      - vm

  - name: Add VSI to Ansible inventory
    add_host:
      name: "{{ item }}"
      ansible_user: root
      groups: new_vsi
      ansible_ssh_extra_args: -o StrictHostKeyChecking=no
    with_items: 
      - "{{existing_ips }}"
    tags:
      - sntest
      - vm
    when: existing_ips is defined 

  - name: Add VSI to Ansible inventory
    add_host:
      name: "{{ item }}"
      ansible_user: root
      groups: new_vsi
      ansible_ssh_extra_args: -o StrictHostKeyChecking=no
    with_items: 
      - "{{new_ips}}"
    tags:
      - sntest
      - vm
    when: new_ips is defined 

- name: Connect to VSI
  hosts: new_vsi
  gather_facts: False
  tasks:
    - name: Wait for VSI to become reachable over SSH
      wait_for_connection:

    - name: Collect OS login message
      command: cat /etc/motd
      register: os_motd

    - name: Print MOTD
      debug:
        var: os_motd.stdout_lines

